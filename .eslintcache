[{"/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/App.js":"1","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/CropDialog.js":"2","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/reportWebVitals.js":"3","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/CropImage.js":"4","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/index.js":"5"},{"size":7669,"mtime":1611649249739,"results":"6","hashOfConfig":"7"},{"size":797,"mtime":1611632181178,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611631922310,"results":"9","hashOfConfig":"7"},{"size":2673,"mtime":1611632240325,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1611631922309,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"k6wsvp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/App.js",["26","27","28","29"],"import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { useDropzone } from \"react-dropzone\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { green } from \"@material-ui/core/colors\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport clsx from \"clsx\";\nimport { LinearProgress } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport CropImage from \"./CropImage\";\n\nconst useStyles = makeStyles((theme) => ({\n  dropzoneContainer: {\n    height: 300,\n    background: \"#efefef\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderStyle: \"dashed\",\n    borderColor: \"#aaa\",\n  },\n  preview: {\n    width: 250,\n    height: 250,\n    margin: \"auto\",\n    display: \"block\",\n    marginBottom: theme.spacing(2),\n    objectFit: \"contain\",\n  },\n  wrapper: {\n    margin: theme.spacing(1),\n    position: \"relative\",\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    \"&:hover\": {\n      backgroundColor: green[700],\n    },\n  },\n  fabProgress: {\n    color: green[500],\n    position: \"absolute\",\n    top: -6,\n    left: -6,\n    zIndex: 1,\n  },\n  buttonProgress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [success, setSuccess] = React.useState(false);\n  const [file, setFile] = React.useState();\n  const [preview, setPreview] = React.useState();\n  const [percent, setPercent] = React.useState(0);\n  const [downloadUri, setDownloadUri] = React.useState();\n  const [selectedImageFile, setSelectedImageFile] = React.useState();\n\n  const buttonClassname = clsx({\n    [classes.buttonSuccess]: success,\n  });\n\n  const onDrop = React.useCallback((acceptedFiles) => {\n    const fileDropped = acceptedFiles[0];\n    if (fileDropped[\"type\"].split(\"/\")[0] === \"image\") {\n      setSelectedImageFile(fileDropped);\n      return;\n    }\n    setFile(fileDropped);\n    const previewUrl = URL.createObjectURL(fileDropped);\n    setPreview(previewUrl);\n    setSuccess(false);\n    setPercent(0);\n  });\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    onDrop,\n  });\n\n  const { ref, ...rootProps } = getRootProps();\n\n  const uploadFile = async () => {\n    try {\n      setSuccess(false);\n      setLoading(true);\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"upload_preset\", \"imagecrop\");\n\n      const API_URL =\n        \"https://api.cloudinary.com/v1_1/designbeauti/image/upload\";\n      const response = await axios.put(API_URL, formData, {\n        onUploadProgress: (progressEvent) => {\n          const percentCompleted = Math.round(\n            (progressEvent.loaded * 100) / progressEvent.total\n          );\n          setPercent(percentCompleted);\n        },\n      });\n\n      setDownloadUri(response.data.fileDownloadUri);\n      setSuccess(true);\n      setLoading(false);\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n\n  const onCropSave = ({ file, preview }) => {\n    setPreview(preview);\n    setFile(file);\n    setSuccess(false);\n    setPercent(0);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\">React File Upload</Typography>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n      <Toolbar />\n\n      <Container maxWidth=\"md\">\n        <Paper elevation={4}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography align=\"center\" style={{ padding: 16 }}>\n                File Upload\n              </Typography>\n              <Divider />\n            </Grid>\n\n            <Grid item xs={6} style={{ padding: 16 }}>\n              <RootRef rootRef={ref}>\n                <Paper\n                  {...rootProps}\n                  elevation={0}\n                  className={classes.dropzoneContainer}\n                >\n                  <input {...getInputProps()} />\n                  <p>Drag 'n' drop some files here, or click to select files</p>\n                </Paper>\n              </RootRef>\n            </Grid>\n\n            <Grid item xs={6} style={{ padding: 16 }}>\n              <Typography align=\"center\" variant=\"subtitle1\">\n                Preview\n              </Typography>\n              <img\n                onLoad={() => URL.revokeObjectURL(preview)}\n                className={classes.preview}\n                src={preview || \"https://via.placeholder.com/250\"}\n              />\n\n              {/*  */}\n              {file && (\n                <>\n                  <Divider />\n                  <Grid\n                    container\n                    style={{ marginTop: 16 }}\n                    alignItems=\"center\"\n                    spacing={3}\n                  >\n                    <Grid item xs={2}>\n                      <div className={classes.wrapper}>\n                        <Fab\n                          aria-label=\"save\"\n                          color=\"primary\"\n                          className={buttonClassname}\n                          onClick={uploadFile}\n                        >\n                          {success ? <CheckIcon /> : <CloudUpload />}\n                        </Fab>\n                        {loading && (\n                          <CircularProgress\n                            size={68}\n                            className={classes.fabProgress}\n                          />\n                        )}\n                      </div>\n                    </Grid>\n\n                    <Grid item xs={10}>\n                      {file && (\n                        <Typography variant=\"body\">{file.name}</Typography>\n                      )}\n                      {loading && (\n                        <div>\n                          <LinearProgress\n                            variant=\"determinate\"\n                            value={percent}\n                          />\n                          <div\n                            style={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              justifyContent: \"center\",\n                            }}\n                          >\n                            <Typography variant=\"body\">{percent}%</Typography>\n                          </div>\n                        </div>\n                      )}\n\n                      {success && (\n                        <Typography>\n                          File Upload Success!{\" \"}\n                          <a href={downloadUri} target=\"_blank\">\n                            File Url\n                          </a>\n                        </Typography>\n                      )}\n                    </Grid>\n                  </Grid>\n                </>\n              )}\n              {/*  */}\n            </Grid>\n          </Grid>\n        </Paper>\n      </Container>\n\n      <CropImage onSave={onCropSave} selectedFile={selectedImageFile} />\n    </>\n  );\n}\n\nexport default App;\n","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/CropDialog.js",[],"/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/reportWebVitals.js",[],["30","31"],"/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/CropImage.js",["32"],"import React from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport CropDialog from \"./CropDialog\";\n\nconst PIXEL_RATIO = 4;\nexport default function CropImage(props) {\n  const [crop, setCrop] = React.useState({\n    unit: \"%\",\n    width: 80,\n    aspect: 16 / 9,\n  });\n\n  const [src, setSrc] = React.useState();\n\n  const [completedCrop, setCompletedCrop] = React.useState();\n\n  const [open, setModalOpen] = React.useState(false);\n\n  const [preview, setPreview] = React.useState();\n  const [croppedFile, setCroppedFile] = React.useState();\n\n  const imgRef = React.useRef(null);\n\n  const previewCanvasRef = React.useRef(null);\n\n  const onLoad = React.useCallback((img) => {\n    imgRef.current = img;\n  }, []);\n\n  React.useEffect(() => {\n    if (props.selectedFile) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setSrc(reader.result));\n      reader.readAsDataURL(props.selectedFile);\n      setModalOpen(true);\n    }\n  }, [props.selectedFile]);\n\n  React.useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n\n    const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = crop.width * PIXEL_RATIO;\n    canvas.height = crop.height * PIXEL_RATIO;\n\n    ctx.setTransform(PIXEL_RATIO, 0, 0, PIXEL_RATIO, 0, 0);\n    ctx.imageSmoothingEnabled = false;\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width,\n      crop.height\n    );\n\n    canvas.toBlob((blob) => {\n      const previewUrl = URL.createObjectURL(blob);\n      const newFile = new File([blob], props.selectedFile.name);\n\n      setPreview(previewUrl);\n      setCroppedFile(newFile);\n    }, \"image/jpg\");\n  }, [completedCrop]);\n\n  return (\n    <>\n      <CropDialog\n        open={open}\n        onHide={() => setModalOpen(false)}\n        onSave={() => {\n          props.onSave({ file: croppedFile, preview });\n          setModalOpen(false);\n        }}\n      >\n        <ReactCrop\n          src={src}\n          style={{ maxHeight: \"550px\" }}\n          crop={crop}\n          locked\n          onChange={(crop, percentCrop) => setCrop(percentCrop)}\n          onComplete={(c) => setCompletedCrop(c)}\n          onImageLoaded={onLoad}\n        />\n      </CropDialog>\n\n      <canvas ref={previewCanvasRef} style={{ width: 0, height: 0 }} />\n    </>\n  );\n}\n","/Users/huynhnguyenhanam/Desktop/research/react-file-upload/src/index.js",[],["33","34"],{"ruleId":"35","severity":1,"message":"36","line":15,"column":8,"nodeType":"37","messageId":"38","endLine":15,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":83,"column":18,"nodeType":"41","endLine":83,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":175,"column":15,"nodeType":"44","endLine":179,"endColumn":17},{"ruleId":"45","severity":1,"message":"46","line":235,"column":49,"nodeType":"47","endLine":235,"endColumn":64},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"39","severity":1,"message":"52","line":79,"column":6,"nodeType":"53","endLine":79,"endColumn":21,"suggestions":"54"},{"ruleId":"48","replacedBy":"55"},{"ruleId":"50","replacedBy":"56"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","MemberExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"React Hook React.useEffect has a missing dependency: 'props.selectedFile.name'. Either include it or remove the dependency array.","ArrayExpression",["59"],["57"],["58"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [completedCrop, props.selectedFile.name]",{"range":"62","text":"63"},[2039,2054],"[completedCrop, props.selectedFile.name]"]